use cohort46M
show collections

db.pets.find()

db.pets.updateMany({type: {$in: ['Cat', 'Dog']}}, {$push: {foods: 'Meat'}})
db.pets.updateMany({type: {$in: ['Cat', 'Dog']}}, {$pop: {foods: 1}})
db.pets.updateOne({name: 'Boris'}, {$push: {foods: 'Whiskas'}})
db.pets.updateOne({type: 'Cat'}, {$push: {foods: 'Whiskas'}})
db.pets.updateMany({type: 'Cat'}, {$push: {foods: 'Whiskas'}})
db.pets.updateMany({name: {$in: ['Vaska', 'Boris']}}, {$pop: {foods: 1}})
db.pets.updateMany({type: {$ne: 'Dog'}}, {$addToSet: {foods: 'Whiskas'}})

db.pets.find({foods: 'Whiskas'})
db.pets.updateOne({name: 'Jerry'}, {$addToSet: {foods: 'Cheese'}})
db.pets.updateOne({}, {$addToSet: {foods: 'Milk'}})
db.pets.updateMany({type: 'Dog'}, {$addToSet: {foods: 'Bone'}})
db.pets.find({foods: {$in: ['Milk', 'Bone']}})
db.pets.find({foods: {$all: ['Milk', 'Cheese']}})

db.students.find().size()
db.grades.find().size()

*
db.students.drop()
db.grades.drop()
*

db.students.find()
db.grades.find()
db.grades.find({type: 'exam', score: {$gt: 90}})
db.grades.find({type: 'exam', score: {$gt: 90}}).size()     // 24
db.grades.find({type: 'exam'}).sort({score: -1}).limit(3)

db.students.find()
db.students.find({scores: {type: 'exam', score: {$gt: 90}}})    // show nothing
db.students.find({'scores.0.type': 'exam', 'scores.0.score': {$gt: 90}})
db.students.find({'scores.0.type': 'exam', 'scores.0.score': {$gt: 90}}).size() // 18
db.students.find({scores: {$elemMatch: {type: 'exam', score: {$gt: 90}}}})
db.students.find({scores: {$elemMatch: {type: 'exam', score: {$gt: 90}}}}).size() // 18

db.products.find()
db.products.find().size() // 10

// SELECT productCode, COUNT(*) FROM products GROUP BY productCode
db.products.aggregate([
    {
        $group: {
            _id: '$manufacturer',
            quantity: {$sum: 1}
        }
    }
])

db.products.aggregate([
    {
        $group: {
            _id: '$manufacturer',
            quantity: {$sum: 1}
        }
    },
    {
        $sort: {
            _id: 1
        }
    }
])

db.products.aggregate([
    {
        $group: {
            _id: '$manufacturer',
            quantity: {$sum: 1}
        }
    },
    {
        $sort: {
            quantity: -1,
            _id: 1
        }
    }
])

db.products.aggregate([
    {
        $match: {
            manufacturer: {$ne: 'Apple'}
        }
    },
    {
        $group: {
            _id: '$manufacturer',
            quantity: {$sum: 1},
        }
    },
    {
        $sort: {
            quantity: -1,
            _id: 1
        }
    }
])

db.products.aggregate([
    {
        $group: {
            _id: '$manufacturer',
            quantity: {$sum: 1},
            total_price: {$sum: '$price'},
            avg_price: {$avg: '$price'},
            min_price: {$min: '$price'},
            max_price: {$max: '$price'},
        }
    },
    {
        $sort: {
            quantity: -1,
            _id: 1
        }
    }
])

db.products.aggregate([
    {
        $match: {
            price: {$lt: 600}
        }
    },
    {
        $group: {
            _id: '$manufacturer',
            quantity: {$sum: 1},
            total_price: {$sum: '$price'},
            avg_price: {$avg: '$price'},
            min_price: {$min: '$price'},
            max_price: {$max: '$price'},
        }
    },
    {
        $sort: {
            quantity: -1,
            _id: 1
        }
    }
])

db.products.aggregate([
    {
        $group: {
            _id: '$manufacturer',
            categories: {$push: '$category'},
            prices: {$push: '$price'}
        }
    },
    {
        $sort: {
            _id: 1
        }
    }
])

db.products.aggregate([
    {
        $group: {
            _id: '$manufacturer',
            categories: {$addToSet: '$category'},
            prices: {$push: '$price'}
        }
    },
    {
        $sort: {
            _id: 1
        }
    }
])

db.grades.find()
db.grades.find({_id: ObjectId('50906d7fa3c412bb040eb58a')})
db.grades.find({student_id: 4, type: 'homework'})

db.grades.explain().find({_id: ObjectId('50906d7fa3c412bb040eb58a')})
db.grades.explain().find({student_id: 4, type: 'homework'})

db.grades.explain('executionStats').find({_id: ObjectId('50906d7fa3c412bb040eb58a')}) // scan 1 time
db.grades.explain('executionStats').find({student_id: 4, type: 'homework'}) // scan 800 time (hole list)

exp = db.grades.explain('executionStats')
exp.find({student_id: 4, type: 'homework'})

db.grades.getIndexes()
db.grades.createIndex({student_id: -1})
db.grades.createIndex({student_id: -1, type: 1})
db.grades.dropIndex({student_id: -1})


